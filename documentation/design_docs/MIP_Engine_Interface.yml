openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ThanKarab/MIP_Engine_Interface/1.0.0
info:
  description: The interface that the engine will have with MIP backend.
  version: "1.0.0"
  title: MIP Engine Interface

paths:
  /algorithms:
    get:
      summary: get all the available algorithms
      description: Get the algorithm names, details and input parameters.
      responses:
        '200':
          description: a list of algorithms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Algorithm'

  /algorithms/{algorithmName}:
    post:
      summary: run an algorithm
      description: Run an algorithm specifying the parameters.
      parameters:
        - in: path
          name: algorithmName
          description: the name of the algorithm to be executed
          required: true
          schema:
            type: string
      requestBody:
        description: Parameters for the algorithm's execution.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmRequestBody'
      responses:
        '200':
          description: 'algorithm finished'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgorithmResult'
        '400':
          description: 'algorithm does not exist or badly formatted input'
      

components:
  schemas:
    Algorithm:
      description: All the details and properties that specify an algorithm.
      example: {
                    "name": "ALGORITHMNAME",
                    "desc": "This is an example algorithm.",
                    "label": "My Algorithm",
                    "inputdata": {
                        "pathology": {
                            "label": "Pathology of the data.",
                            "desc": "The pathology that the algorithm will run on.",
                            "types": ["text"],
                            "notblank": true,
                            "multiple": false
                        },
                        "dataset": {
                            "label": "Set of data to use.",
                            "desc": "The set of data to run the algorithm on.",
                            "types": ["text"],
                            "notblank": true,
                            "multiple": true
                        },
                        "filter": {
                            "label": "Filter on the data.",
                            "desc": "Features used in my algorithm.",
                            "types": ["json"],
                            "notblank": false,
                            "multiple": false
                        },
                        "x": {
                            "label": "features",
                            "desc": "Features used in my algorithm.",
                            "types": ["int", "real", "text"],
                            "stattypes": ["numerical", "nomimal"],
                            "notblank": true,
                            "multiple": true
                        },
                        "y": {
                            "label": "target",
                            "desc": "Target variable for my algorithm.",
                            "types": ["text", "int"],
                            "stattypes": ["nominal"],
                            "enumslen": 2,
                            "notblank": true,
                            "multiple": false
                        }
                    },
                    "parameters": {
                        "my_enum_param": {
                            "label": "Some param",
                            "desc": "Example of parameter with enumerations.",
                            "type": "text",
                            "enums": ["a", "b", "c"],
                            "default": "a",
                            "notblank": true,
                            "multiple": false
                        },
                        "my_int_param": {
                            "label": "Some param",
                            "desc": "Example of integer param.",
                            "type": "int",
                            "default": 4,
                            "min": 2,
                            "max": 4,
                            "notblank": true,
                            "multiple": false
                        },
                        "list_param": {
                            "label": "Some param",
                            "desc": "Example of list of floats param.",
                            "type": "real",
                            "default": [0.8, 0.95],
                            "min": 0.0,
                            "max": 1.0,
                            "notblank": true,
                            "multiple": true
                        }
                    },
                    "crossvalidation": {
                        "name": "crossvalidation",
                        "desc": "Module for performing cross validation on supervised learning models.",
                        "label": "Cross Validation",
                        "parameters": {
                            "type": {
                                "label": "Type of cross-validation",
                                "desc": "Type of cross-validation",
                                "type": "text",
                                "enums": ["k_fold", "leave_dataset_out"],
                                "default": "k_fold",
                                "notblank": true,
                                "multiple": false
                            }, 
                            "nsplits": {
                                "label": "Number of splits",
                                "desc": "Number of splits",
                                "type": "int",
                                "min": 2,
                                "max": 20,
                                "default": 5,
                                "notblank": true,
                                "multiple": false
                            },
                            "metrics": {
                                "label": "Metrics",
                                "desc": "Cross-validation metrics.",
                                "type": "text",
                                "enums": ["precision", "recall", "auc", "roc", "confusion_matrix", "f1_score"],
                                "default": null,
                                "notblank": true,
                                "multiple": true
                            }
                        }
                    }
                }
      type: object
      required:
        - name
        - desc
        - label
        - parameters
      properties:
        name:
          type: string
        desc:
          type: string
        label:
          type: string
        inputdata:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/AlgorithmInputData'
        parameters:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/AlgorithmParameters'
        crossvalidation:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/Algorithm'
              
    AlgorithmInputData:
      description: Input parameters describing the data used to fit a statistical/ML model.
      example: {
                    "pathology": {
                        "label": "Pathology of the data.",
                        "desc": "The pathology that the algorithm will run on.",
                        "types": ["text"],
                        "notblank": true,
                        "multiple": false
                    },
                    "dataset": {
                        "label": "Set of data to use.",
                        "desc": "The set of data to run the algorithm on.",
                        "types": ["text"],
                        "notblank": true,
                        "multiple": true
                    },
                    "filter": {
                        "label": "Filter on the data.",
                        "desc": "Features used in my algorithm.",
                        "types": ["jsonObject"],
                        "notblank": false,
                        "multiple": false
                    },
                    "x": {
                        "label": "features",
                        "desc": "Features used in my algorithm.",
                        "types": ["int", "real", "text"],
                        "stattypes": ["numerical", "nomimal"],
                        "notblank": true,
                        "multiple": true
                    },
                    "y": {
                        "label": "target",
                        "desc": "Target variable for my algorithm.",
                        "types": ["text", "int"],
                        "stattypes": ["nominal"],
                        "enumslen": 2,
                        "notblank": true,
                        "multiple": false
                    }
                }
      type: object
      additionalProperties:
        type: object
        required:
          - label
          - desc
          - types
          - notBlank
          - multiple
        properties:
          label:
            type: string
          desc:
            type: string
          types:
            type: array
            items:
              type: string
              enum:
                - 'int'
                - 'real'
                - 'text'
                - 'jsonObject'
          stattypes:
            type: array
            items:
              type: string
              enum:
                - 'numerical'
                - 'nominal'
          notBlank:
            type: boolean
          multiple:
            type: boolean
          enumslen:
            type: integer

    AlgorithmParameters:
      description: Algorithm parameters controlling the fitting process.
      example: {
                    "my_enum_param": {
                        "label": "Some param",
                        "desc": "Example of parameter with enumerations.",
                        "type": "text",
                        "inputtype": "dropdown",
                        "enums": ["a", "b", "c"],
                        "default": "a",
                        "notblank": true,
                        "multiple": false
                    },
                    "my_int_param": {
                        "label": "Some param",
                        "desc": "Example of integer param.",
                        "type": "int",
                        "default": 4,
                        "min": 2,
                        "max": 4,
                        "notblank": true,
                        "multiple": false
                    },
                    "list_param": {
                        "label": "Some param",
                        "desc": "Example of list of floats param.",
                        "type": "real",
                        "default": [0.8, 0.95],
                        "min": 0.0,
                        "max": 1.0,
                        "notblank": true,
                        "multiple": true
                    }
                }
      type: object
      additionalProperties:
        type: object
        required:
          - label
          - desc
          - type
          - default
          - notBlank
          - multiple
        properties:
          label:
            type: string
          desc:
            type: string
          type:
            type: string
            enum:
              - 'int'
              - 'real'
              - 'text'
              - 'boolean'
          default:
            anyOf:
              - type: string
              - type: integer
              - type: number
              - type: boolean
              - type: array
          notBlank:
            type: boolean
          multiple:
            type: boolean
          min:
            type: number
          max:
            type: number

    AlgorithmRequestBody:
      description: The request body of the call to run an algorithm.
      example: {
                    "inputdata": {
                        "pathology": "dementia",
                        "dataset": ["adni", "ppmi"],
                        "filter": {},
                        "x": ["lefthippocampus", "righthippocampus"],
                        "y": ["alzheimerbroadcategory"]
                    },
                    "parameters": {
                        "my_enum_param": "a",
                        "my_int_param": 3,
                        "list_param": [0.8, 0.95]
                    },
                    "crossvalidation": {
                        "type": "k_fold",
                        "nsplits": 10,
                        "metrics": ["precision","confusion_matrix"]
                    }
                }
      type: object
      required:
        - inputdata
      properties:
        inputdata:    
          description: a dictionairy of parameters relative to the datasets
          type: object
          required:
            - pathology
            - dataset
          properties:
            pathology:
              type: string
            dataset:
              type: array
              items:
                type: string
            x:
              type: array
              items:
                type: string
            y:
              type: array
              items:
                type: string
            filter:
              type: object
              description: A jquery builder object, https://querybuilder.js.org/demo.html , using the x and y variables given.
        parameters:
          description: a dictionairy of parameters relative to the algorithm
          type: object
          additionalProperties:
            anyOf:
              - type: string
              - type: integer
              - type: number
              - type: boolean
              - type: array
        crossvalidation:
          description: a dictionairy of parameters relative to the cross validation of the algorithm
          type: object
          required:
            - type
            - nsplits
            - metrics
          properties:
            type:
              type: string
            nsplits:
              type: integer
            metrics:
              type: array
              items:
                type: string

    AlgorithmResult:
      description: The result of an algorithm execution. A dictionairy of the available visualization types, containing a list of the different visualizations. Possible MIMETypes here https://redmine.hbpmip.link/issues/186
      example: {
                    "application/json": [
                        {
                            "single":
                            {
                                "num_datapoints": 45
                
                            }
                        },
                        {
                            "double":
                            {
                                "num_datapoints": 437
                
                            }
                        }
                    ],
                    "application/vnd.highcharts+json": [
                        {
                            "visualization": "amazing visulizaiton"
                        },
                        {
                            "visualization2": "amazing visulizaiton2"
                        }
                    ]
                }
      type: object
      additionalProperties:
        type: array
        items:
          type: object